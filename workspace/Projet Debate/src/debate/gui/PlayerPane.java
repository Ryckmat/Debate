/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Player.java
 *
 * Created on 17 avr. 2012, 17:32:37
 */
package debate.gui;

import debate.game.Player;
import debate.gui.renderer.ListCellRendererForFormula;
import debate.gui.renderer.ListCellRendererForRequest;
import debate.gui.renderer.TreeCellRendererForArgument;
import debate.logical.Argument;
import debate.logical.Request;
import debate.move.Move;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import satoulouse.Formula;

/**
 *
 * @author PropriÃ©taire
 */
public class PlayerPane extends javax.swing.JPanel{
    /*************************/
    /*                       */
    /*      CONSTRUCTEURS    */
    /*                       */
    /*************************/
    public PlayerPane() {
        initComponents();
        p=null;
        // Gestion du timer
        t = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (p.getSpeechtime() > 0) {
                     p.withdrawSpeechingTime();
                     chronojLabel.setText("" + p.getSpeechtime());
                     jProgressBar1.setValue(250 - p.getSpeechtime());
                }

                 else
                    chronojLabel.setText("End");         
            }
        });

    }

    /*************************/
    /*                       */
    /*      ACCESSEURS       */
    /*                       */
    /*************************/
    public Player getPlayer() {
        return p;
    }
    

    /**
     * @return the jList1
     */
    public javax.swing.JList getjListFormula() {
        return jListFormula;
    }

    /**
     * @return the jTreeArguments
     */
    public javax.swing.JTree getjTreeArguments() {
        return jTreeArguments;
    }

    /**
     * @return the jList3
     */
    public javax.swing.JList getjListRequests() {
        return jListRequests;
    }

    /**
     * @return the takeHandjButton
     */
    public JButton getTakeHandjButton() {
        return takeHandjButton;
    }

    public JButton getAssertButton() {
        return movesPane1.getAssertButton();
    }

    public JButton getAcceptButton() {
        return movesPane1.getAcceptButton();
    }

    public JButton getArgueButton() {
        return movesPane1.getArgueButton();
    }

    public JButton getAgreeButton() {
        return movesPane1.getAgreeButton();
    }

    public JButton getRetractButton() {
        return movesPane1.getRetractButton();
    }

    public JButton getReplaceButton() {
        return movesPane1.getReplaceButton();
    }

    public JButton getDismantleButton() {
        return movesPane1.getDismantleButton();
    }

    public JButton getChallengeButton() {
        return movesPane1.getChallengeButton();
    }
    
     public JButton getQuizButton() {
        return movesPane1.getQuizButton();
    }
     
       public JButton getQuizLinkButton() {
        return movesPane1.getQuizLinkButton();
    }
       
       public JButton getCloseButton(){
           return movesPane1.getCloseButton();
       }
    
    

    public Timer getTimer() {
        return t;
    }


    /*************************/
    /*                       */
    /*        METHODES       */
    /*                       */
    /*************************/
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListFormula = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTreeArguments = new javax.swing.JTree();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListRequests = new javax.swing.JList();
        movesPane1 = new debate.gui.MovesPane();
        jPanel2 = new javax.swing.JPanel();
        chronojLabel = new javax.swing.JLabel();
        takeHandjButton = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        registrationJButton = new javax.swing.JButton();
        jProgressBarDepthFormula = new javax.swing.JProgressBar();
        depthjLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PlayerName", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        setPreferredSize(new java.awt.Dimension(320, 475));

        jPanel1.setName("jPanel1"); // NOI18N
        jPanel1.setLayout(new java.awt.GridLayout(2, 2, 2, 2));

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jListFormula.setBorder(javax.swing.BorderFactory.createTitledBorder("Formulas"));
        jListFormula.setModel(new DefaultListModel());
        jListFormula.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListFormula.setCellRenderer(new ListCellRendererForFormula());
        jListFormula.setName("jListFormula"); // NOI18N
        jListFormula.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListFormulaValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListFormula);

        jPanel1.add(jScrollPane1);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTreeArguments.setBorder(javax.swing.BorderFactory.createTitledBorder("Arguments"));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTreeArguments.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTreeArguments.setCellRenderer(new TreeCellRendererForArgument());
        jTreeArguments.setName("jTreeArguments"); // NOI18N
        jTreeArguments.setRootVisible(false);
        jTreeArguments.setToggleClickCount(1);
        jTreeArguments.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeArgumentsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jTreeArguments);

        jPanel1.add(jScrollPane2);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jListRequests.setBorder(javax.swing.BorderFactory.createTitledBorder("Requests"));
        jListRequests.setModel(new DefaultListModel());
        jListRequests.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListRequests.setCellRenderer(new ListCellRendererForRequest());
        jListRequests.setName("jListRequests"); // NOI18N
        jListRequests.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListRequestsValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jListRequests);

        jPanel1.add(jScrollPane3);

        movesPane1.setName("movesPane1"); // NOI18N
        jPanel1.add(movesPane1);

        jPanel2.setName("jPanel2"); // NOI18N

        chronojLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/chrono.png"))); // NOI18N
        chronojLabel.setText("000");
        chronojLabel.setToolTipText("Speech time remaining");
        chronojLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        chronojLabel.setName("chronojLabel"); // NOI18N

        takeHandjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/greenbuzz.png"))); // NOI18N
        takeHandjButton.setText("Take Turn");
        takeHandjButton.setEnabled(false);
        takeHandjButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        takeHandjButton.setName("takeHandjButton"); // NOI18N
        takeHandjButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        jProgressBar1.setMaximum(250);
        jProgressBar1.setName("jProgressBar1"); // NOI18N

        registrationJButton.setText("Registration");
        registrationJButton.setName("registrationJButton"); // NOI18N
        registrationJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrationJButtonActionPerformed(evt);
            }
        });

        jProgressBarDepthFormula.setMaximum(40);
        jProgressBarDepthFormula.setName("jProgressBarDepthFormula"); // NOI18N

        depthjLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/letters.png"))); // NOI18N
        depthjLabel.setText("000");
        depthjLabel.setToolTipText("Max. Formula Depth");
        depthjLabel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        depthjLabel.setName("depthjLabel"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chronojLabel)
                            .addComponent(depthjLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jProgressBarDepthFormula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(takeHandjButton, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(registrationJButton)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chronojLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jProgressBarDepthFormula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(depthjLabel)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(takeHandjButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(registrationJButton)
                .addGap(24, 24, 24)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 10, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, 0, 587, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void registrationJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrationJButtonActionPerformed
        String n = null;
        do {
            n = JOptionPane.showInputDialog(this, "Enter your nickname", "Registration",
                    JOptionPane.QUESTION_MESSAGE);
            if (n == null || n.trim().equals("")) {
                JOptionPane.showMessageDialog(this, "Enter your nickname", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }

        } while (n == null || n.equals(""));
        newPlayer(n.trim(), 250, 0);
    }//GEN-LAST:event_registrationJButtonActionPerformed

    private void jTreeArgumentsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeArgumentsValueChanged
        jListFormula.clearSelection();
        jListRequests.clearSelection();
        updateButtonDisplay(null, getSelectedArgument(), null);
    }//GEN-LAST:event_jTreeArgumentsValueChanged

    private void jListFormulaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListFormulaValueChanged
        jTreeArguments.clearSelection();
        jListRequests.clearSelection();
        updateButtonDisplay(getSelectedFormula(), null, null);
    }//GEN-LAST:event_jListFormulaValueChanged

    private void jListRequestsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListRequestsValueChanged
        // TODO add your handling code here:
        jTreeArguments.clearSelection();
        jListFormula.clearSelection();
        updateButtonDisplay(null, null, getSelectedRequest());
    }//GEN-LAST:event_jListRequestsValueChanged

       // Initialise le joueur correspondant Ã  ce Panel
    public void newPlayer(String n, int  time, int depth) {
        p = new Player(n, time, depth);
        setBorder(javax.swing.BorderFactory.createTitledBorder("" + p));
        chronojLabel.setText(""+time);
        registrationJButton.setVisible(false);
    }
    
    //Initialise le jour suite Ã  une restauration
    void newPlayer(ArrayList<String> socle) {
        p = new Player(socle.get(0), Integer.parseInt(socle.get(1)), Integer.parseInt(socle.get(2)));
        setBorder(javax.swing.BorderFactory.createTitledBorder("" + p));
        chronojLabel.setText(p.getSpeechtime()+"");
        registrationJButton.setVisible(false);
    }

    //Met Ã  jour les diffÃ©rentes options affichage (bordure, buzzer, boutons)
    public void updateDisplay(boolean hasHand, boolean anyoneHasHand) {
        this.hasHand=hasHand;
            if (hasHand) {
                takeHandjButton.setEnabled(true);
                takeHandjButton.setText("End Turn");
                takeHandjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/orangebuzz.png"))); // NOI18N
                setBorder(javax.swing.BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.ORANGE, 2), "" + p));

            } else {
                if (anyoneHasHand) { /*Alors l'adversaire a la main*/
                    takeHandjButton.setEnabled(false);
                    takeHandjButton.setText("Waiting...");
                    setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(Color.RED, 2), "" + p));
                } else {
                    takeHandjButton.setEnabled(true);
                    takeHandjButton.setText("Take Turn");
                    takeHandjButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/greenbuzz.png"))); // NOI18N
                    setBorder(javax.swing.BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.GREEN, 2), "" + p));
                }
            }

            updateButtonDisplay(getSelectedFormula(), getSelectedArgument(), getSelectedRequest());
        
        // Mise Ã  jour du compteur de profondeur de formule
        if (p != null) {
            jProgressBarDepthFormula.setValue(p.getCountFormulasAccepted());
            depthjLabel.setText("" + p.getCountFormulasAccepted());
        }

    }

    //Met Ã  jour les modÃ¨les des listes avec ceux des joueurs
    public void refreshModel() {
        ((DefaultListModel) jListFormula.getModel()).clear();
        for (String s : p.getFormulaList()) {
            ((DefaultListModel) jListFormula.getModel()).addElement(s);
        }
        ((DefaultListModel) jListRequests.getModel()).clear();
        for (Request r : p.getRequestList()) {
            ((DefaultListModel) jListRequests.getModel()).addElement(r);
        }
        refreshArgumentTree();
    }

    //Construit le JTree Arguments du joueur avec sa liste d'argument
    private void refreshArgumentTree() {

        DefaultMutableTreeNode root = new DefaultMutableTreeNode("Argument List");

        for (Argument arg : p.getArgumentList()) {
            DefaultMutableTreeNode conclusion = new DefaultMutableTreeNode(arg);
            for (Formula f : arg.getSupport()) {
                conclusion.add(new DefaultMutableTreeNode(f));
            }
            root.add(conclusion);
        }
        ((DefaultTreeModel) jTreeArguments.getModel()).setRoot(root);
    }

    //DÃ©marre le timer
    public void startTimer() {
        t.start();
    }

    //Stoppe le timer
    public void stopTimer() {
        t.stop();
    }

    // Retourne la requete sÃ©lectionnÃ©e
    public Request getSelectedRequest() {
        if (!jListRequests.isSelectionEmpty() && jListRequests.getSelectedValue() instanceof Request) {
            return ((Request) jListRequests.getSelectedValue());
        }
        return null;
    }

    // Retourne la formule sÃ©lectionnÃ©e
    public String getSelectedFormula() {
        if (!jListFormula.isSelectionEmpty()) {
            return (String)jListFormula.getSelectedValue();
        }
        return null;
    }

    //Retourne un argument sÃ©lectionnÃ©
    public Argument getSelectedArgument() {
        if (jTreeArguments.isSelectionEmpty()) 
            return null;
        
        TreePath path = jTreeArguments.getSelectionPath();
        DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) path.getLastPathComponent();
        Object userObject = selectedNode.getUserObject();
        if (userObject instanceof Argument) 
            return (Argument) userObject;
        
        return null;

    }

    //Autorise le clic sur les boutons en fonction de la situation
    public void updateButtonDisplay(String f, Argument a, Request r) {
        //Activation de tous les boutons si le joueur Ã  la main
        movesPane1.activateAllButton(hasHand);

        if (hasHand) {
            //Retract n'est possible que si une formule est sÃ©lectionnÃ©e
            movesPane1.getRetractButton().setEnabled(f != null);
            //Accept ou Agree n'est possible que si une requete est sÃ©lectionnÃ©e
            if (r != null) 
            {
                movesPane1.getAgreeButton().setEnabled(r.getType()==Move.Argue);
                movesPane1.getAcceptButton().setEnabled(r.getType()==Move.Assert);
                //Challenge n'est possible que si une requete de formule est sÃ©lectionnÃ©e
                movesPane1.getChallengeButton().setEnabled(r.getType()==Move.Assert);
                movesPane1.getQuizButton().setEnabled(r.getType()==Move.Argue);
                movesPane1.getQuizLinkButton().setEnabled(r.getType()==Move.Argue);
                movesPane1.getReplaceButton().setEnabled(r.getType().name().contains("Quiz") 
                        || r.getType()==Move.Challenge);
            } 
            else 
            {
                movesPane1.getAgreeButton().setEnabled(false);
                movesPane1.getAcceptButton().setEnabled(false);
                movesPane1.getChallengeButton().setEnabled(false);
                movesPane1.getQuizButton().setEnabled(false);
                movesPane1.getQuizLinkButton().setEnabled(false);
                movesPane1.getReplaceButton().setEnabled(false);
            }
            //Dismantle n'est accessible uniquement si un argument est selectionnÃ©
            movesPane1.getDismantleButton().setEnabled(a != null);
            movesPane1.getCloseButton().setEnabled(p.getRequestList().isEmpty());
        }
    }
    
    //Autorise le clic sur les boutons en fonction de la situation (formulas)
    
    
    
    /*************************/
    /*                       */
    /*      ATTRIBUTS        */
    /*                       */
    /*************************/
    private Player p;
    private Timer t;
    private boolean hasHand;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel chronojLabel;
    private javax.swing.JLabel depthjLabel;
    private javax.swing.JList jListFormula;
    private javax.swing.JList jListRequests;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBarDepthFormula;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTree jTreeArguments;
    private debate.gui.MovesPane movesPane1;
    private javax.swing.JButton registrationJButton;
    private javax.swing.JButton takeHandjButton;
    // End of variables declaration//GEN-END:variables

}
