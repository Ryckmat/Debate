/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DebateFrame2.java
 *
 * Created on 19 avr. 2012, 00:51:05
 */
package debate.gui;


import debate.game.Player;
import debate.game.Referee;
import debate.logical.Argument;
import debate.logical.Request;
import debate.menu.SaveConfiguration;
import debate.move.Move;
import debate.move.MoveHandler;
import debate.tools.*;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import satoulouse.*;



/**
 *
 * @author julien
 */
public final class DebateFrame extends javax.swing.JFrame {

    /*************************/
    /*                       */
    /*     BUILDER           */
    /*                       */
    /*************************/
    public DebateFrame() {
        initComponents();          
        TextFile.removeFile("temp.txt");

        // Listener sur le bouton de d√©but de partie
        refereePane.getNewGameButton().addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                soundEnableMenuItem.setSelected(true);             
                startGame();
                refereePane.newReferee();
            }
        });

        // Listener sur les boutons de prise de main
        player1Pane.getTakeHandjButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerTakeHand(player1Pane);
            }
        });

        player2Pane.getTakeHandjButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerTakeHand(player2Pane);

            }
        });

        //Listener sur les boutons de coup
        defineMovesHandlers();
    } 
 
    /*************************/
    /*                       */
    /*     METHODS           */
    /*                       */
    /*************************/
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        player1Pane = new debate.gui.PlayerPane();
        player2Pane = new debate.gui.PlayerPane();
        refereePane = new debate.gui.RefereePane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemAutoStart = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItemQuit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        soundEnableMenuItem = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        player1Pane.setName("player1Pane"); // NOI18N

        player2Pane.setName("player2Pane"); // NOI18N

        refereePane.setBorder(javax.swing.BorderFactory.createTitledBorder("Common Knowledge"));
        refereePane.setName("refereePane"); // NOI18N

        jMenuBar1.setName("jMenuBar1"); // NOI18N

        jMenu1.setText("Game");
        jMenu1.setName("jMenu1"); // NOI18N

        jMenuItemAutoStart.setText("AutoStart Game");
        jMenuItemAutoStart.setName("jMenuItemAutoStart"); // NOI18N
        jMenuItemAutoStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAutoStartActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemAutoStart);

        jMenuItem3.setText("Load Game");
        jMenuItem3.setName("jMenuItem3"); // NOI18N
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Save Game");
        jMenuItem4.setName("jMenuItem4"); // NOI18N
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItemQuit.setText("Quit");
        jMenuItemQuit.setName("jMenuItemQuit"); // NOI18N
        jMenuItemQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemQuitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemQuit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Options");
        jMenu2.setName("jMenu2"); // NOI18N

        jMenuItem1.setText("Load Formulas from File");
        jMenuItem1.setName("jMenuItem1"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        soundEnableMenuItem.setText("Sound");
        soundEnableMenuItem.setToolTipText("Active/Desactive Sound");
        soundEnableMenuItem.setName("soundEnableMenuItem"); // NOI18N
        soundEnableMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                soundEnableMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(soundEnableMenuItem);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(player1Pane, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(refereePane, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(player2Pane, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(player2Pane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(player1Pane, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(refereePane, javax.swing.GroupLayout.DEFAULT_SIZE, 782, Short.MAX_VALUE)))
                .addGap(173, 173, 173))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemQuitActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItemQuitActionPerformed

    private void jMenuItemAutoStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAutoStartActionPerformed

        ArrayList<String> info=new ArrayList<>();
        for (int i=0;  i<2; i++){
            info.add("Player "+ (i+1));
            info.add("250");
            info.add("0");
        }
        info.add("Sound enabled"); // Activation ou non du son
        info.add(0+""); //Compteur de coups
        resetGame(info); // 
        resetGame2();    
    }//GEN-LAST:event_jMenuItemAutoStartActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Selection du fichier
       refereePane.getReferee().addTopic(TextFile.selectTextFile((Window)this));
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void resetGame(ArrayList<String> socle) {
        player1Pane.newPlayer(socle);
        removeHeadListNTimes(socle, 3);
        player2Pane.newPlayer(socle);
        removeHeadListNTimes(socle, 3);
        removeHeadListNTimes(socle, refereePane.newReferee(socle)+2);
        soundEnableMenuItem.setSelected(refereePane.getReferee().getSound());
        startGame();
    }
    
    private void removeHeadListNTimes(ArrayList<String> s, int i){
        for (int j=0; j<i; j++)
            s.remove(0);      
    }

    private void resetGame2() {
        refreshModels();
        refereePane.refreshModel();
        refereePane.getReferee().setCurrentplayer(HandStatus.NoOneHasHand);
        updateDisplay(HandStatus.NoOneHasHand);
    }

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (refereePane.getReferee() != null && refereePane.getReferee().getCurrentplayer()!=HandStatus.NoOneHasHand){
            MessageDialog.displayErrorMessage((Window)this, ErrorEnum.Saving);
            return;
        }
            
        try {
            SaveConfiguration.saveGame(TextFile.selectTextFile((Window)this), player1Pane.getPlayer(), player2Pane.getPlayer(), refereePane.getReferee());
        } catch (IOException ex) {
            Logger.getLogger(DebateFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        if (refereePane.getReferee() != null && refereePane.getReferee().getCurrentplayer()!=HandStatus.NoOneHasHand){
            MessageDialog.displayErrorMessage((Window)this, ErrorEnum.Loading);  
            return;
        }
            
        try {
            
            ArrayList<String> socle = TextFile.lire_dans_un_fichier_lignes(TextFile.selectTextFile((Window) this));
            resetGame(socle);
            if (loadGame(socle, player1Pane.getPlayer(), player2Pane.getPlayer(), refereePane.getReferee()))
                MessageDialog.displaySuccessMessage(this, Success.Loading);
            resetGame2();
        } catch (IOException ex) {
            Logger.getLogger(DebateFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void soundEnableMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_soundEnableMenuItemActionPerformed
        refereePane.getReferee().setSound(!refereePane.getReferee().getSound());
    }//GEN-LAST:event_soundEnableMenuItemActionPerformed
       private boolean endOfMatch(EndOfGame eog) {
          if (eog == null)
            if (player1Pane.getPlayer().getSpeechtime()==0 || player2Pane.getPlayer().getSpeechtime()==0)
                eog=EndOfGame.OpponentSpeechingTimeExpired;
          if (eog !=null){     
            int score=refereePane.refreshScore(player1Pane.getPlayer(), player2Pane.getPlayer());
            if (score < 50)
                new CongratulationsDialog(this, true, player1Pane.getPlayer(), eog);        
            else
                if (score > 50)
                     new CongratulationsDialog(this, true, player2Pane.getPlayer(),
                             eog);
            else
                MessageDialog.displaySuccessMessage(this, Success.Deuce);
            new PlaySound((Window)this, refereePane.getReferee().getSound(), SoundEnum.Win);
            return true;   
        }
        return false;
            }
           
    public void handlerTakeHand(PlayerPane p) {
        // identification du panel qui a pris la main
        int id=1;
        if (p.getName().equals("player2Pane")) id=2;
        if (!endOfMatch(null)){
            // Cas ou personne n'avait la main
            if (refereePane.getReferee().getCurrentplayer() == HandStatus.NoOneHasHand) {
                //Emission du son du buzzer si activ√©
                   new PlaySound((Window)this, refereePane.getReferee().getSound(), SoundEnum.Buzz);
                
                if (id == 1) {//Le joueur 1 vient de prendre la main
                    refereePane.getReferee().setCurrentplayer(HandStatus.PlayerOneHasHand);
                    player2Pane.getTimer().stop();
                } else {/* Le joueur 2 vient de prendre la main*/
                    refereePane.getReferee().setCurrentplayer(HandStatus.PlayerTwoHasHand);
                    player1Pane.getTimer().stop();
                }
                
            } else {
                //Cas ou un joueur avait d√©ja la main
                refereePane.getReferee().setCurrentplayer(HandStatus.NoOneHasHand);
                player1Pane.getTimer().start();
                player2Pane.getTimer().start();
            }
            int older_score=refereePane.getScore();
            int currently_score=refereePane.refreshScore(player1Pane.getPlayer(), player2Pane.getPlayer());
            if (older_score != currently_score)
                if (currently_score != 50)
                    new PlaySound(this, refereePane.getReferee().getSound(), SoundEnum.Advantage);
                else
                    new PlaySound(this, refereePane.getReferee().getSound(), SoundEnum.Deuce);
            
 
                updateDisplay(refereePane.getReferee().getCurrentplayer());
   
            if (refereePane.getReferee().getCountMoves()==0)   
                if (id==1)
                    handlerAssertButton(player1Pane, player2Pane.getPlayer());
                else
                    handlerAssertButton(player2Pane, player1Pane.getPlayer());
            
        }
        else dispose();   
    }
        
    private void initPlayer(PlayerPane p) {
        p.startTimer();
        p.getTakeHandjButton().setEnabled(true);
    }

    private void startGame() {
        if (player1Pane.getPlayer() == null) {
            MessageDialog.displayErrorMessage((Window)this, ErrorEnum.MissingPlayer1);
            return;
        }
        if (player2Pane.getPlayer() == null) {
            MessageDialog.displayErrorMessage((Window)this, 
                    ErrorEnum.MissingPlayer2);
            return;
        }
        initPlayer(player1Pane);
        initPlayer(player2Pane);

        // Placer ici pour √©viter que les joueurs ne puissent buzzer avant
        // que la partie ait effectivement d√©but√©

        refereePane.getNewGameButton().setVisible(false);
    }

    public void defineMovesHandlers() {
        // Listener Ajout de Formule
        player1Pane.getAssertButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerAssertButton(player1Pane, player2Pane.getPlayer());
            }
        });

        player2Pane.getAssertButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerAssertButton(player2Pane, player1Pane.getPlayer());
            }
        });

        // Listener Accept Formule
        player1Pane.getAcceptButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerAcceptButton(player1Pane, player2Pane.getPlayer());
            }
        });
        player2Pane.getAcceptButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerAcceptButton(player2Pane, player1Pane.getPlayer());
            }
        });

        // Listener Argue
        player1Pane.getArgueButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerArgueButton(player1Pane, player2Pane.getPlayer());
            }
        });
        player2Pane.getArgueButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerArgueButton(player2Pane, player1Pane.getPlayer());
            }
        });

        // Listener Agree
        player1Pane.getAgreeButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerAgreeButton(player1Pane, player2Pane.getPlayer());
            }
        });
        player2Pane.getAgreeButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerAgreeButton(player2Pane, player1Pane.getPlayer());
            }
        });

        // Listener Dismantle
        player1Pane.getDismantleButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerDismantleButton(player1Pane, player2Pane.getPlayer());
            }
        });
        player2Pane.getDismantleButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerDismantleButton(player2Pane, player1Pane.getPlayer());
            }
        });

        // Listener Retract
        player1Pane.getRetractButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerRetractButton(player1Pane, player2Pane.getPlayer());
            }
        });
        player2Pane.getRetractButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerRetractButton(player2Pane, player1Pane.getPlayer());
            }
        });

        // Listener Challenge
        player1Pane.getChallengeButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerChallengeButton(player1Pane, player2Pane.getPlayer());
            }
        });
        player2Pane.getChallengeButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerChallengeButton(player2Pane, player1Pane.getPlayer());
            }
        });
        
        //ListenerReplace
        
         player1Pane.getReplaceButton().addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {              
                if (player1Pane.getSelectedRequest().getType().name().contains("Quiz"))
                    handlerResolveQuiz(player1Pane, player2Pane, player1Pane.getSelectedRequest().getType());  
                 else
                        if (player2Pane.getSelectedRequest().getType().name().contains("Quiz"))
                            handlerResolveChallenge(player1Pane, player2Pane);
               
                }

            });
           
           player2Pane.getReplaceButton().addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (player2Pane.getSelectedRequest().getType().name().contains("Quiz"))
                    handlerResolveQuiz(player2Pane, player1Pane, player2Pane.getSelectedRequest().getType());
                else
                    if (player2Pane.getSelectedRequest().getType()==Move.Challenge)
                        handlerResolveChallenge(player2Pane, player1Pane);
        }
           });
        

        // Listener Doublic click pour r√©gler une requete de type challenge
        player1Pane.getjListRequests().addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {

                if (e.getClickCount() == 2 && refereePane.getReferee().getCurrentplayer()==HandStatus.PlayerOneHasHand) 
                    if (player1Pane.getSelectedRequest().getType()==Move.Challenge) 
                        handlerResolveChallenge(player1Pane, player2Pane);
                    else
                        if (player1Pane.getSelectedRequest().getType().name().contains("Quiz"))
                            handlerResolveQuiz(player1Pane, player2Pane, player1Pane.getSelectedRequest().getType());
                
            }
        });
        
        player2Pane.getjListRequests().addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {

                if (e.getClickCount() == 2 &&  refereePane.getReferee().getCurrentplayer()==HandStatus.PlayerTwoHasHand) {
                    if (player2Pane.getSelectedRequest().getType()==Move.Challenge) 
                        handlerResolveChallenge(player2Pane, player1Pane);
                    else
                        if (player2Pane.getSelectedRequest().getType().name().contains("Quiz"))
                            handlerResolveQuiz(player2Pane, player1Pane, player2Pane.getSelectedRequest().getType());
                
                }
        }});
        
        // Listener Quiz
        player1Pane.getQuizButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerQuizButton(player1Pane, player2Pane.getPlayer(), Move.Quiz);
            }
        });
        player2Pane.getQuizButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerQuizButton(player2Pane, player1Pane.getPlayer(), Move.Quiz);
            }
        });
        
        // Listener QuizLink
        
         player1Pane.getQuizLinkButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerQuizButton(player1Pane, player2Pane.getPlayer(), Move.QuizLink);
            }
        });
        player2Pane.getQuizLinkButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerQuizButton(player2Pane, player1Pane.getPlayer(), Move.QuizLink);
            }
        });
        //Listener Close      
            player1Pane.getCloseButton().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent ae) {
                handlerCloseButton(player1Pane);
            }
        });
            
        player2Pane.getCloseButton().addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae){ 
                handlerCloseButton(player2Pane);
            }
        });
    }

// Met √† jour les liste des deux joueurs ainsi que la jauge de score
        
    public void refreshModels() {
        player1Pane.refreshModel();
        player2Pane.refreshModel();
    }
    

    //Mise √† jour de l'affichage selon le joueur qui √† la main
    public void updateDisplay(HandStatus status) {
        player1Pane.updateDisplay(status==HandStatus.PlayerOneHasHand, status != HandStatus.NoOneHasHand);
        player2Pane.updateDisplay(status==HandStatus.PlayerTwoHasHand, status != HandStatus.NoOneHasHand);
    }
    
    private void handlerEndofCorrectMove(PlayerPane p){
        refereePane.getReferee().incrementCountMoves();
        refreshModels();
        new PlaySound(this, refereePane.getReferee().getSound(), SoundEnum.Ace);
        handlerTakeHand(p);      
    }

    private void handlerAssertButton(PlayerPane p1, Player p2) {
        if (newAssert(p1.getPlayer(), p2, refereePane.getReferee()))
            handlerEndofCorrectMove(p1);
        else //Evite de rafraichir les mod√®les alors que rien n'a √©t√© modifi√©
        {
            new PlaySound((Window)this, refereePane.soundEnabled(), SoundEnum.Fault);
            handlerTakeHand(p1);
        }
    }

    private void handlerArgueButton(PlayerPane p1, Player p2) {
        if (newArgue(p1.getPlayer(), p2, refereePane.getReferee(), Move.Argue, null, null))
                handlerEndofCorrectMove(p1);
        else //Evite de rafraichir les mod√®les alors que rien n'a √©t√© modifi√©
        {
            new PlaySound((Window)this, refereePane.soundEnabled(), SoundEnum.Fault);
            handlerTakeHand(p1);
        }
            
    }

    private void handlerAcceptButton(PlayerPane p1, Player p2) {
          newAccept(p1.getPlayer(), p2, refereePane.getReferee(), p1.getSelectedRequest());
          refereePane.refreshModel();
          handlerEndofCorrectMove(p1);
    }

    private void handlerAgreeButton(PlayerPane p1, Player p2) {
       newAgree(p1.getPlayer(), p2, refereePane.getReferee(), p1.getSelectedRequest());
       refereePane.refreshModel();
       handlerEndofCorrectMove(p1);
    }

    private void handlerDismantleButton(PlayerPane p1, Player p2) {
        if (p1.getSelectedArgument()== null)
            MessageDialog.displayErrorMessage((Window)this, ErrorEnum.NoneArgumentSelected);
        newDismantle(p1, p2);
        handlerEndofCorrectMove(p1);
    }

    private void handlerRetractButton(PlayerPane p1, Player p2) {
        if (p1.getSelectedFormula().isEmpty())
            MessageDialog.displayErrorMessage((Window)this, ErrorEnum.NoneFormulaSelected);
        newRetract(p1, p2);
        handlerEndofCorrectMove(p1);

    }

    private void handlerChallengeButton(PlayerPane p1, Player p2) {
        if (p1.getSelectedRequest().getType() == Move.Assert){
            p2.addRequest(new Request(p1.getSelectedRequest().getFormula(), Move.Challenge));
            handlerEndofCorrectMove(p1);
        }
    }
    
    public void handlerCloseButton(PlayerPane pane) {
             if (pane.getPlayer().getRequestList().isEmpty())
                    endOfMatch(EndOfGame.NoneRequestExpectating);
                handlerTakeHand(pane);
      }  

    private void handlerResolveChallenge(PlayerPane pane1, PlayerPane pane2) {
        newArgue(pane1.getPlayer(), pane2.getPlayer(), refereePane.getReferee(), Move.Challenge, pane1.getSelectedRequest().getFormula(), null);
        handlerEndofCorrectMove(pane1);
        }
    
    private void handlerResolveQuiz(PlayerPane pane1, PlayerPane pane2, Move type) {
        newArgue(pane1.getPlayer(), pane2.getPlayer(), refereePane.getReferee(), type, null, pane1.getSelectedRequest().getArgument());
        handlerEndofCorrectMove(pane1);
    }
    
    private void handlerQuizButton(PlayerPane p1, Player p2, Move type) {
                //Verification que la requete porte bien sur une formule
        if (p1.getSelectedRequest().getType() == Move.Argue)   
        {
            p2.addRequest(p1.getSelectedRequest().getArgument(), type);
            handlerEndofCorrectMove(p1);
        }
    }
    
       
    /*
     * Package move (en attente de solution permettant de d√©localiser le code)
     * 
     * */
    
   public void newAccept(Player pWithRequest, Player pWithFormula, Referee referee, Request request) {

    referee.addFormula(request.getFormula()); //Ajout de la formule aux connaissances communes
    referee.getSolver().addFormula(new FormulaForSAT4J(request.getFormula())); //Ajout au solver de l'arbitre

    pWithFormula.removeRequestByFormula(request.getFormula().toString());   //Suppression d'un √©ventuel Challenge de la formule
    pWithFormula.addPoints(request.getFormula());
    if (pWithRequest.removeRequest(request)) //Retrait du Assert chez le joueur courant
        pWithFormula.removeFormula(request.getFormula()); //Retrait de la formule de la liste de l'autre joueur
    }
   
   public void newRetract(PlayerPane p1, Player p2) {
        String f=p1.getSelectedFormula();
        p1.getPlayer().removeFormula(f); //Retrait de la formule de la liste du joueur courant
        p1.getPlayer().removeClauses(); //Retrait de son solveur 
        p1.getPlayer().removeArgumentContainingFormula(f); //Retrait de tous les arguments contenant la formule
        p1.getPlayer().removeArgueQuizContainingFormula(f, Move.Quiz); //Retrait de tous les quizz sur des arguments contenant la formule             
        p1.getPlayer().removeChallengeContainingFormula(f);
        p2.removeRequestByFormula(f); //Retrait des requ√™tes Assert du joueur adverse contenant la formule
        p2.removeArgueQuizContainingFormula(f, Move.Argue); //Retrait des requ√™tes argue du joueur contenant la formule
    }
   public void newAgree(Player pWithRequest, Player pWithFormula, Referee referee, Request request){
             //Suppression d'√©ventuels quiz li√© √† l'argument
            pWithFormula.removeRequestByArgument(request.getArgument());
                
            //Ajout de l'argument aux arguments communs s'il n'est pas d√©ja contenu
            if (!MoveHandler.checkRedundancy(request.getArgument(), referee.getArgumentList()))           
                referee.addArgument(request.getArgument());
            referee.getSolver().addFormula(new FormulaForSAT4J(new Formula(request.getConclusion().toString(), false)));

            pWithFormula.addPoints(request.getArgument());
             if (pWithRequest.removeRequest(request))//Retrait de l'argue de cet argument chez le joueur courant
                pWithFormula.removeArgument(request.getArgument()); //Retrait de l'argument du joueur adverse
            pWithFormula.removeRequestByArgument(request.getArgument());//Retrait d'√©ventuels quiz/quizlink en attente
                                                                        //chez le joueur adverse

      }
   public Argument getArgumentWritten(ArgumentDialog dialog, List<Argument> l1, List<Argument> l2){
        if (dialog.getSuccess()){ 
            Argument argument = new Argument(dialog.getArrayListFormulas(), dialog.getConclusion());
            if (!MoveHandler.testRedundancyArgument((Window) this, l1, l2, argument))
                return argument;
        } 
        dialog.dispose();
        return null;
   } 
   
   public ArgumentDialog openArgumentDialog(Player p1, Referee r){
        ArgumentDialog dialog = new ArgumentDialog(this, p1.getSolver(), r, true);
        dialog.addFormulaFromReferee(r);
        dialog.addFormulaFromPlayer(p1);
        return (dialog);
   }
   public boolean newArgue(Player p1, Player p2, Referee r, Move m, Formula formula, Argument arg) {
       boolean ok=true;
        ArgumentDialog dialog=openArgumentDialog(p1, r);
        if (m==Move.Challenge){
                dialog.setConclusion(formula);
                dialog.lockConclusion();
        }
         if (m.name().contains("Quiz")){
                for (Formula fo: arg.getSupport())
                    dialog.addFormula(fo.toString());
                dialog.lockSupport();
                dialog.setConclusion(arg.getConclusion());
        }
      dialog.setVisible(true);
        
      Argument argument=getArgumentWritten(dialog, p1.getArgumentList(), r.getArgumentList());
         
        if (argument == null){
            dialog.dispose();
            return false;
        }
        
                switch (m){
                    case Challenge:
                            if (argument.getSupport().isEmpty()){
                                MessageDialog.displayErrorMessage((Window)this, ErrorEnum.EmptySupport);
                                ok=false;  
                            }   
                            break;
                    case QuizLink:
                            if (arg.getConclusion().toString().equals(argument.getConclusion().toString())){
                                MessageDialog.displayErrorMessage((Window)this, ErrorEnum.ConclusionNotModified);
                                ok=false;
                            }
                            break;
                    default: 
                                break;
                            }
                  if (!ok){
                       dialog.dispose();
                       return false;
                  }
                        p1.addArgument(argument);
                        p2.addRequest(argument, Move.Argue);
                       if (m == Move.Challenge)
                       {
                        p1.removeRequestByFormula(formula.toString());
                        //On retire la requete Assert originelle de la liste
                        //Celle ci sera forcement remplac√©e par une requete Argue issue de la r√©solution du challenge
                        p2.removeRequestByFormula(formula.toString());
                        //On retire la formule orginelle de la liste
                        //Celle ci sera la conclusion de la nouvelle requete Argue
                        p1.removeFormula(formula);
                       }
                       if ( m.name().contains("Quiz"))
                       {
                        p1.removeRequestByArgument(arg);
                        p2.removeRequestByArgument(arg);
                        p1.removeArgument(arg);
                       }                   
           dialog.dispose();
           return true;
   }
   public String openFormulaDialog(Player p1,  Referee r){
       String retour="";
        FormulaDialog dialog = new FormulaDialog(this, p1.getSolver(), r, true);
        dialog.addFormulaFromReferee(r);
        dialog.addFormulaFromPlayer(p1);
        dialog.setVisible(true);
        if (dialog.getSuccess())
            if (!MoveHandler.testRedundancyFormula((Window)this, p1.getFormulaList(), 
                    r.getFormulaList(), dialog.getArrayListFormulas().get(0)))
                    retour=dialog.getArrayListFormulas().get(0);
        dialog.dispose();
        return retour;
   }
   public boolean newAssert(Player p1, Player p2, Referee r){
       String formstring=openFormulaDialog(p1, r);    
        if (!formstring.isEmpty()) {
            p1.addFormula(formstring);
            p2.addRequest(new Formula(formstring, false), Move.Assert);
            return true;
        }
        return false;
    }
   public void newDismantle(PlayerPane p1, Player p2) {
       Argument arg=p1.getSelectedArgument();
       p1.getPlayer().removeArgument(arg); //Suppression de l'argument de la liste des arguments du joueur courant
       p2.removeRequestByArgument(arg); //Suppression de l'Argue de cet argument chez le joueur adverse
       p1.getPlayer().removeRequestByArgument(arg);  //Suppression des √©ventuels Quizlink/Quizlink
       p1.getPlayer().removeClauses();//de cet argument d joueur courant    
    }
   
       
    /*
     * Partie restauration du paquet menu (en attente de solution permettant de d√©localiser le code)
     * 
     * */
   public boolean loadGame(ArrayList<String> socle, Player p1, Player p2, Referee r){

        //Enregistrement des formules
        ArrayList<Integer> ref = new ArrayList<>();
        
        for (int i = 0; i < socle.get(0).length(); i += 2)
            ref.add(Integer.parseInt(socle.get(0).charAt(i) + ""));
        socle.remove(0);
          if (!socle.get(0).contains("Formulas")){
              MessageDialog.displayErrorMessage((Window)this, ErrorEnum.LoadingParameters);
              return false;
          }
              
         
        socle.remove(0);
        //Chargement des formules (essai par la suite d'en faire deux fonctions
        loadFormulaListReferee(r, socle, ref.get(0));
       
          if (!socle.get(0).contains("Arguments")){
             MessageDialog.displayErrorMessage((Window)this, ErrorEnum.LoadingFormulas);
             return false;
        }           
        /*Ici, on doit avoir socle(0) correspondant √† la ligne Arguments;*/
         socle.remove(0);
        
        loadArgumentListReferee(r, socle, ref.get(1));
       
          if (!socle.get(0).contains("Requetes")){
             MessageDialog.displayErrorMessage((Window)this, ErrorEnum.LoadingArguments);
             return false;
            }   
          socle.remove(0);
           /*Ici on doit avoir socle(0) correspondant √† la ligne nickname(joueur1) des requetes*/
          loadRequestListPlayer(p1, p2, socle, ref.get(2));
          loadRequestListPlayer(p2, p1, socle, ref.get(3));
          
          return (socle.isEmpty());   
     }

   public void loadFormulaListReferee(Referee p1, ArrayList<String> socle, int nbforms) {
        socle.remove(0);
        for (int i=0; i < nbforms; i++){
            p1.addFormula(socle.get(0));
            socle.remove(0);
        }
    }
    
   public void loadArgumentListReferee(Referee p, ArrayList<String> socle, int nbargs) {
        ArrayList<String> support = new ArrayList<>();
        boolean continu;
        Character c;
        int j;
        socle.remove(0);
        for (int i = 0; i < nbargs; i++){
            continu = true;
            while (continu) {
                c = (Character) socle.get(0).charAt(0);
                if (c.equals('S')) 
                    support.add(socle.get(0).substring(3));
                 else {
                    continu = false;
                    p.getArgumentList().add(new Argument(support, socle.get(0).substring(3)));
                 }   
                socle.remove(0);
            }
            support.clear();
            continu = true;
        }
    }

       // TODO ajouter le chargement de requete
   public void loadRequestListPlayer (Player p, Player p2, ArrayList<String> socle, int argc) {
      ArrayList<String> support = new ArrayList<>();
      boolean continu;
      Character c;
      Move movetype;
      socle.remove(0);
      for (int i = 0; i < argc; i++){
          movetype=MoveHandler.stringToEnum(socle.get(0));
          socle.remove(0);
          if (MoveHandler.concernsFormula(movetype)){
              if (movetype==Move.Challenge){
                  if (!p.getFormulaList().contains(socle.get(0)))
                        p.addFormula(socle.get(0));
              }
              else{//Alors Assert
                  if (!p2.getFormulaList().contains(socle.get(0)))
                    p2.addFormula(socle.get(0));
              }
             p.addRequest(new Formula(socle.get(0), false), movetype);
             socle.remove(0);
           } 
          else {
           support.clear(); 
           continu = true;
            while (continu){
                c= (Character) socle.get(0).charAt(0);
                if (c.equals('S'))
                    support.add(socle.get(0).substring(3));
                 else{
                    continu = false;
                    Argument arg1=new Argument(support, socle.get(0).substring(3));
                    if (movetype==Move.Argue){
                        if (p2.getArgumentBelongedToList(arg1) != null)
                            p.addRequest(p2.getArgumentBelongedToList(arg1), movetype);
                        else{
                            p.addRequest(arg1, movetype);
                            p2.addArgument(arg1);
                        }
                    }
                   else{//Quiz ou Quizlink
                        if (p.getArgumentBelongedToList(arg1) != null)
                            p.addRequest(p.getArgumentBelongedToList(arg1), movetype);
                        else{
                            p.addRequest(arg1, movetype);
                            p.addArgument(arg1);
                        }
                    }  
                   }
               socle.remove(0);
            }
           }
         }
        }
    
    /*************************/
    /*                       */
    /*     VARIABLES         */
    /*                       */
    /*************************/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItemAutoStart;
    private javax.swing.JMenuItem jMenuItemQuit;
    private debate.gui.PlayerPane player1Pane;
    private debate.gui.PlayerPane player2Pane;
    private debate.gui.RefereePane refereePane;
    private javax.swing.JCheckBoxMenuItem soundEnableMenuItem;
    // End of variables declaration//GEN-END:variables

    }




